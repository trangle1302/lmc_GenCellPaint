model:
  base_learning_rate: 2.0e-6   # set to target_lr by starting main.py with '--scale_lr True'; doesn't need to change this when using different numbers of GPUs
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    ckpt_path: null #/scratch/users/tle1302/stable-diffusion/logs/2024-03-27T09-32-21_lmc_ldm_vq4_bfNucleus_ActinTubulin_fov512/checkpoints/last.ckpt
    linear_start: 0.0015
    linear_end: 0.0155
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    loss_type: l1
    first_stage_key: "image"
    cond_stage_key: "hybrid-conditions" # the key in the dataset for feeding into the condition model
    image_size: 64
    channels: 3
    cond_stage_trainable: true
    concat_mode: false # this will set conditioning_key to "crossattn" if not exists
    conditioning_key: hybrid
    cond_dropout: 0.1 # dropout conditions for class-conditioned model
    # scale_by_std: true
    scale_factor: 0.18215
    monitor: 'val/loss_simple_ema'
    use_ema: false


    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 64
        in_channels: 6
        out_channels: 3
        model_channels: 192
        attention_resolutions: [ 1, 2, 4, 8 ]   # 32, 16, 8, 4
        num_res_blocks: 2
        channel_mult: [ 1, 2, 2, 4, 4 ]  # 32, 16, 8, 4, 2
        num_heads: 8
        use_scale_shift_norm: True
        resblock_updown: True
        use_spatial_transformer: True
        context_dim: 3

    first_stage_config:
      target: ldm.models.autoencoder.VQModelInterface
      params:
        embed_dim: 3
        n_embed: 8192
        # autoencoder for the output channels
        ckpt_path: /scratch/users/tle1302/stable-diffusion/logs/2024-03-27T01-24-26_lmc_autoencoder_ActinMitoTubulin.f512_0.5/checkpoints/last.ckpt #best.ckpt
        ddconfig:
          double_z: false
          z_channels: 3
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
          # attn_type: none
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.data.bf2.BFClassEmbedder
      params:
        include_location: true
        use_loc_embedding: false #true
        include_ref_image: true
        image_embedding_model:
          target: ldm.models.autoencoder.VQModelInterface
          params:
            embed_dim: 3
            n_embed: 8192
            # autoencoder for the reference channels
            ckpt_path: /scratch/users/tle1302/stable-diffusion/logs/2024-03-27T05-56-03_lmc_autoencoder_bfNucleus_f512_0.5/checkpoints/last.ckpt
            ddconfig:
              double_z: false
              z_channels: 3
              resolution: 256
              in_channels: 3
              out_ch: 3
              ch: 128
              ch_mult:
              - 1
              - 2
              - 4
              num_res_blocks: 2
              attn_resolutions: []
              dropout: 0.0
              # attn_type: none
            lossconfig:
              target: torch.nn.Identity

data:
  target: ldm.data.base.DataModuleFromConfig
  params:
    batch_size: 16
    num_workers: 1
    wrap: True
    shuffle_val_dataloader: True
    train:
      target: ldm.data.bf2.BFPaint
      params:
        path_to_metadata: /scratch/groups/emmalu/lightmycell/meta_HPA.csv
        group: 'train'
        input_channels: ['BF', 'Nucleus']
        output_channels: 'org'
        is_ldm: True
        flip_and_rotate: True
        size: 512
        scale_factor: 0.5
        return_info: False
        refine: true
    validation:
      target: ldm.data.bf2.BFPaint
      params:
        path_to_metadata: /scratch/groups/emmalu/lightmycell/meta_HPA.csv
        group: 'validation'
        input_channels: ['BF', 'Nucleus']
        output_channels: 'org'
        is_ldm: True
        size: 512
        scale_factor: 0.5
        flip_and_rotate: True
        return_info: False
        refine: true

lightning:
  callbacks:
    image_logger:
      target: ldm.callbacks.ImageLogger
      params:
        batch_frequency: 1000
        log_validation: true
        val_batch_frequency: 1000
        monitor_val_metric: "val/loss_simple_ema"
        max_images: 8
        increase_log_steps: false
        log_to_slack: []
        log_first_step: true
        log_on_batch_idx: true
        log_images_kwargs:
          ddim_steps: 100
          quantize_denoised: false
          inpaint: false
          unconditional_guidance_scale: 5.0
          plot_denoise_rows: false
          plot_progressive_rows: false
          plot_diffusion_rows: false
          plot_inputs: false
          plot_reconstructions: false
          mix_sample: false
          n_row: 8

  trainer:
    benchmark: True
    # accelerator: dp # need to change to dp because the default ddp will free the training
    limit_train_batches: 4500
    limit_val_batches: 0.5 # number of val batch to check
    num_sanity_val_steps: 0
    val_check_interval: 0.5 # run val every x batches, float=percentage
    max_epochs: 300
